name: Build Android APK

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git zip unzip openjdk-8-jdk wget
        sudo apt-get install -y autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo5 cmake libffi-dev libssl-dev
    
    - name: Set up Android SDK
      run: |
        export ANDROID_HOME=${HOME}/android-sdk-linux
        export ANDROID_SDK_ROOT=${ANDROID_HOME}
        export PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools
        
        mkdir -p ${ANDROID_HOME}
        cd ${ANDROID_HOME}
        
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip
        mkdir -p cmdline-tools/latest
        mv cmdline-tools/* cmdline-tools/latest/ || true
        
        export PATH=${PATH}:${ANDROID_HOME}/cmdline-tools/latest/bin
        
        yes | sdkmanager --licenses || echo "Some licenses may not have been accepted"
        sdkmanager "platform-tools" "platforms;android-30" "build-tools;30.0.3" "ndk;23.1.7779620"
        
        echo "ANDROID_HOME=${ANDROID_HOME}" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=${ANDROID_HOME}" >> $GITHUB_ENV
        echo "${ANDROID_HOME}/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "${ANDROID_HOME}/platform-tools" >> $GITHUB_PATH
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install buildozer cython
    
    - name: Create basic icons
      run: |
        # Luo yksinkertainen 512x512 PNG ikoni
        python3 -c "
        try:
            from PIL import Image, ImageDraw
            img = Image.new('RGB', (512, 512), (13, 17, 23))
            draw = ImageDraw.Draw(img)
            draw.ellipse([100, 100, 412, 412], fill=(88, 166, 255))
            img.save('icon.png')
            img.save('presplash.png')
            print('Icons created with PIL')
        except ImportError:
            print('PIL not available, creating minimal icons')
        " || echo "Creating fallback icons..."
        
        # Fallback: luo minimaalinen PNG jos PIL ei toimi
        if [ ! -f "icon.png" ]; then
          echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==" | base64 -d > icon.png
          cp icon.png presplash.png
        fi
    
    - name: Build APK
      run: |
        export ANDROID_HOME=${HOME}/android-sdk-linux
        export ANDROID_SDK_ROOT=${ANDROID_HOME}
        export PATH=${PATH}:${ANDROID_HOME}/cmdline-tools/latest/bin:${ANDROID_HOME}/platform-tools
        
        # Buildaa APK
        buildozer android debug
    
    - name: Upload APK artifact
      uses: actions/upload-artifact@v3
      if: success()
      with:
        name: infonaytto-apk
        path: bin/*.apk
    
    - name: List build outputs
      if: always()
      run: |
        echo "=== Build directory contents ==="
        ls -la
        echo "=== Bin directory contents ==="
        ls -la bin/ || echo "No bin directory"
        echo "=== Buildozer directory ==="
        ls -la .buildozer/ || echo "No .buildozer directory"
